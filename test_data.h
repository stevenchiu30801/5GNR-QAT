#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "cpa_types.h"
#include "cpa_cy_sym.h"

#ifndef PRINT_ERR
#define PRINT_ERR(msg, arg...) \
    printf("%s:%d %s() " msg, __FILE__, __LINE__, __func__, ##arg)
#endif

#ifndef PRINT_DBG
#define PRINT_DBG(msg, arg...) PRINT_ERR(msg, ##arg)
#endif

typedef struct _TestData {
    Cpa8U *key;
    Cpa32U count;
    Cpa8U bearer;
    CpaBoolean dir;
    Cpa8U *iv;
    Cpa8U *in;
    Cpa8U *out;
    Cpa32U keySize;
    Cpa32U ivSize;
    Cpa32U inSize;
    Cpa32U outSize;
} TestData;

void freeTestData(TestData testData);
void genSnow3GIv(TestData *testData);

TestData genNea1TestData()
{
    TestData ret;
    Cpa8U testKey[] = {
        0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x81, 0xFF, 0x48};
    Cpa8U testIn[] = {
        0x7E, 0xC6, 0x12, 0x72, 0x74, 0x3B, 0xF1, 0x61, 0x47, 0x26, 0x44, 0x6A, 0x6C, 0x38, 0xCE, 0xD1,
        0x66, 0xF6, 0xCA, 0x76, 0xEB, 0x54, 0x30, 0x04, 0x42, 0x86, 0x34, 0x6C, 0xEF, 0x13, 0x0F, 0x92,
        0x92, 0x2B, 0x03, 0x45, 0x0D, 0x3A, 0x99, 0x75, 0xE5, 0xBD, 0x2E, 0xA0, 0xEB, 0x55, 0xAD, 0x8E,
        0x1B, 0x19, 0x9E, 0x3E, 0xC4, 0x31, 0x60, 0x20, 0xE9, 0xA1, 0xB2, 0x85, 0xE7, 0x62, 0x79, 0x53,
        0x59, 0xB7, 0xBD, 0xFD, 0x39, 0xBE, 0xF4, 0xB2, 0x48, 0x45, 0x83, 0xD5, 0xAF, 0xE0, 0x82, 0xAE,
        0xE6, 0x38, 0xBF, 0x5F, 0xD5, 0xA6, 0x06, 0x19, 0x39, 0x01, 0xA0, 0x8F, 0x4A, 0xB4, 0x1A, 0xAB,
        0x9B, 0x13, 0x48, 0x80};
    Cpa8U testOut[] = {
        0x8C, 0xEB, 0xA6, 0x29, 0x43, 0xDC, 0xED, 0x3A, 0x09, 0x90, 0xB0, 0x6E, 0xA1, 0xB0, 0xA2, 0xC4,
        0xFB, 0x3C, 0xED, 0xC7, 0x1B, 0x36, 0x9F, 0x42, 0xBA, 0x64, 0xC1, 0xEB, 0x66, 0x65, 0xE7, 0x2A,
        0xA1, 0xC9, 0xBB, 0x0D, 0xEA, 0xA2, 0x0F, 0xE8, 0x60, 0x58, 0xB8, 0xBA, 0xEE, 0x2C, 0x2E, 0x7F,
        0x0B, 0xEC, 0xCE, 0x48, 0xB5, 0x29, 0x32, 0xA5, 0x3C, 0x9D, 0x5F, 0x93, 0x1A, 0x3A, 0x7C, 0x53,
        0x22, 0x59, 0xAF, 0x43, 0x25, 0xE2, 0xA6, 0x5E, 0x30, 0x84, 0xAD, 0x5F, 0x6A, 0x51, 0x3B, 0x7B,
        0xDD, 0xC1, 0xB6, 0x5F, 0x0A, 0xA0, 0xD9, 0x7A, 0x05, 0x3D, 0xB5, 0x5A, 0x88, 0xC4, 0xC4, 0xF9,
        0x60, 0x5E, 0x41, 0x40};
    ret.key = malloc(sizeof(Cpa8U) * sizeof(testKey));
    memcpy(ret.key, testKey, sizeof(testKey));
    ret.count = 0x72A4F20F;
    ret.bearer = 0x0C;
    ret.dir = 1;
    ret.in = malloc(sizeof(Cpa8U) * sizeof(testIn));
    memcpy(ret.in, testIn, sizeof(testIn));
    ret.out = malloc(sizeof(Cpa8U) * sizeof(testOut));
    memcpy(ret.out, testOut, sizeof(testOut));
    ret.keySize = sizeof(testKey);
    ret.inSize = sizeof(testIn);
    ret.outSize = sizeof(testOut);

    genSnow3GIv(&ret);

    return ret;
}

CpaCySymCipherDirection getCipherDirection(TestData testData)
{
    if (testData.dir == 1)
    {
        return CPA_CY_SYM_CIPHER_DIRECTION_ENCRYPT;
    }
    else
    {
        return CPA_CY_SYM_CIPHER_DIRECTION_DECRYPT;
    }
}

void freeTestData(TestData testData)
{
    if (testData.key != NULL)
    {
        free(testData.key);
    }
    if (testData.iv != NULL)
    {
        free(testData.iv);
    }
    if (testData.in != NULL)
    {
        free(testData.in);
    }
    if (testData.out != NULL)
    {
        free(testData.out);
    }
}

void genSnow3GIv(TestData *testData)
{
    const Cpa32U ivLen = 16;
    testData->iv = malloc(sizeof(Cpa8U) * ivLen);
    testData->iv[15] = (Cpa8U)(testData->count & 0x00000011);
    testData->iv[14] = (Cpa8U)((testData->count & 0x00001100) >> 2);
    testData->iv[13] = (Cpa8U)((testData->count & 0x00110000) >> 4);
    testData->iv[12] = (Cpa8U)((testData->count & 0x11000000) >> 6);

    testData->iv[11] = 0x00;
    testData->iv[10] = 0x00;
    testData->iv[9] = 0x00;
    testData->iv[8] = (testData->bearer << 3) | ((testData->dir & 0x01) << 2);
#ifdef DEBUG
    PRINT_DBG("IV0 : %d\n", testData->iv[8]);
#endif

    testData->iv[7] = testData->iv[15];
    testData->iv[6] = testData->iv[14];
    testData->iv[5] = testData->iv[13];
    testData->iv[4] = testData->iv[12];

    testData->iv[3] = testData->iv[11];
    testData->iv[2] = testData->iv[10];
    testData->iv[1] = testData->iv[9];
    testData->iv[0] = testData->iv[8];

    testData->ivSize = ivLen;
}
