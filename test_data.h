#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "cpa_types.h"
#include "cpa_cy_sym.h"

typedef struct _TestData {
    CpaCySymCipherAlgorithm algo;
    Cpa8U *key;
    Cpa32U count;
    Cpa8U bearer;
    Cpa8U dir;
    Cpa32U bitLen;
    Cpa8U *iv;
    Cpa8U *in;
    Cpa8U *out;
    Cpa32U keySize;
    Cpa32U ivSize;
    Cpa32U inSize;
    Cpa32U outSize;
} TestData;

void freeTestData(TestData *testData);
void genIv(TestData *testData);

int gDebugParam = 1;

TestData genNea1TestData1()
{
    TestData ret;
    ret.algo = CPA_CY_SYM_CIPHER_SNOW3G_UEA2;
    Cpa8U testKey[] = {
        0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x81, 0xFF, 0x48};
    Cpa8U testIn[] = {
        0x7E, 0xC6, 0x12, 0x72, 0x74, 0x3B, 0xF1, 0x61, 0x47, 0x26, 0x44, 0x6A, 0x6C, 0x38, 0xCE, 0xD1,
        0x66, 0xF6, 0xCA, 0x76, 0xEB, 0x54, 0x30, 0x04, 0x42, 0x86, 0x34, 0x6C, 0xEF, 0x13, 0x0F, 0x92,
        0x92, 0x2B, 0x03, 0x45, 0x0D, 0x3A, 0x99, 0x75, 0xE5, 0xBD, 0x2E, 0xA0, 0xEB, 0x55, 0xAD, 0x8E,
        0x1B, 0x19, 0x9E, 0x3E, 0xC4, 0x31, 0x60, 0x20, 0xE9, 0xA1, 0xB2, 0x85, 0xE7, 0x62, 0x79, 0x53,
        0x59, 0xB7, 0xBD, 0xFD, 0x39, 0xBE, 0xF4, 0xB2, 0x48, 0x45, 0x83, 0xD5, 0xAF, 0xE0, 0x82, 0xAE,
        0xE6, 0x38, 0xBF, 0x5F, 0xD5, 0xA6, 0x06, 0x19, 0x39, 0x01, 0xA0, 0x8F, 0x4A, 0xB4, 0x1A, 0xAB,
        0x9B, 0x13, 0x48, 0x80};
    Cpa8U testOut[] = {
        0x8C, 0xEB, 0xA6, 0x29, 0x43, 0xDC, 0xED, 0x3A, 0x09, 0x90, 0xB0, 0x6E, 0xA1, 0xB0, 0xA2, 0xC4,
        0xFB, 0x3C, 0xED, 0xC7, 0x1B, 0x36, 0x9F, 0x42, 0xBA, 0x64, 0xC1, 0xEB, 0x66, 0x65, 0xE7, 0x2A,
        0xA1, 0xC9, 0xBB, 0x0D, 0xEA, 0xA2, 0x0F, 0xE8, 0x60, 0x58, 0xB8, 0xBA, 0xEE, 0x2C, 0x2E, 0x7F,
        0x0B, 0xEC, 0xCE, 0x48, 0xB5, 0x29, 0x32, 0xA5, 0x3C, 0x9D, 0x5F, 0x93, 0x1A, 0x3A, 0x7C, 0x53,
        0x22, 0x59, 0xAF, 0x43, 0x25, 0xE2, 0xA6, 0x5E, 0x30, 0x84, 0xAD, 0x5F, 0x6A, 0x51, 0x3B, 0x7B,
        0xDD, 0xC1, 0xB6, 0x5F, 0x0A, 0xA0, 0xD9, 0x7A, 0x05, 0x3D, 0xB5, 0x5A, 0x88, 0xC4, 0xC4, 0xF9,
        0x60, 0x5E, 0x41, 0x40};
    ret.bitLen = 798;
    ret.key = malloc(sizeof(Cpa8U) * sizeof(testKey));
    memcpy(ret.key, testKey, sizeof(testKey));
    ret.count = 0x72A4F20F;
    ret.bearer = 0x0C;
    ret.dir = 1;
    ret.in = malloc(sizeof(Cpa8U) * sizeof(testIn));
    memcpy(ret.in, testIn, sizeof(testIn));
    ret.out = malloc(sizeof(Cpa8U) * sizeof(testOut));
    memcpy(ret.out, testOut, sizeof(testOut));
    ret.keySize = sizeof(testKey);
    ret.inSize = sizeof(testIn);
    ret.outSize = sizeof(testOut);

    genIv(&ret);

    return ret;
}

TestData genNea1TestData2()
{
    TestData ret;
    ret.algo = CPA_CY_SYM_CIPHER_SNOW3G_UEA2;
    Cpa8U testKey[] = {
        0xEF, 0xA8, 0xB2, 0x22, 0x9E, 0x72, 0x0C, 0x2A, 0x7C, 0x36, 0xEA, 0x55, 0xE9, 0x60, 0x56, 0x95};
    Cpa8U testIn[] = {
        0x10, 0x11, 0x12, 0x31, 0xE0, 0x60, 0x25, 0x3A, 0x43, 0xFD, 0x3F, 0x57, 0xE3, 0x76, 0x07, 0xAB,
        0x28, 0x27, 0xB5, 0x99, 0xB6, 0xB1, 0xBB, 0xDA, 0x37, 0xA8, 0xAB, 0xCC, 0x5A, 0x8C, 0x55, 0x0D,
        0x1B, 0xFB, 0x2F, 0x49, 0x46, 0x24, 0xFB, 0x50, 0x36, 0x7F, 0xA3, 0x6C, 0xE3, 0xBC, 0x68, 0xF1,
        0x1C, 0xF9, 0x3B, 0x15, 0x10, 0x37, 0x6B, 0x02, 0x13, 0x0F, 0x81, 0x2A, 0x9F, 0xA1, 0x69, 0xD8};
    Cpa8U testOut[] = {
        0xE0, 0xDA, 0x15, 0xCA, 0x8E, 0x25, 0x54, 0xF5, 0xE5, 0x6C, 0x94, 0x68, 0xDC, 0x6C, 0x7C, 0x12,
        0x9C, 0x56, 0x8A, 0xA5, 0x03, 0x23, 0x17, 0xE0, 0x4E, 0x07, 0x29, 0x64, 0x6C, 0xAB, 0xEF, 0xA6,
        0x89, 0x86, 0x4C, 0x41, 0x0F, 0x24, 0xF9, 0x19, 0xE6, 0x1E, 0x3D, 0xFD, 0xFA, 0xD7, 0x7E, 0x56,
        0x0D, 0xB0, 0xA9, 0xCD, 0x36, 0xC3, 0x4A, 0xE4, 0x18, 0x14, 0x90, 0xB2, 0x9F, 0x5F, 0xA2, 0xFC};
    ret.bitLen = 510;
    ret.key = malloc(sizeof(Cpa8U) * sizeof(testKey));
    memcpy(ret.key, testKey, sizeof(testKey));
    ret.count = 0xE28BCF7B;
    ret.bearer = 0x18;
    ret.dir = 0;
    ret.in = malloc(sizeof(Cpa8U) * sizeof(testIn));
    memcpy(ret.in, testIn, sizeof(testIn));
    ret.out = malloc(sizeof(Cpa8U) * sizeof(testOut));
    memcpy(ret.out, testOut, sizeof(testOut));
    ret.keySize = sizeof(testKey);
    ret.inSize = sizeof(testIn);
    ret.outSize = sizeof(testOut);

    genIv(&ret);

    return ret;
}

TestData genNea1TestData3()
{
    TestData ret;
    ret.algo = CPA_CY_SYM_CIPHER_SNOW3G_UEA2;
    Cpa8U testKey[] = {
        0x5A, 0xCB, 0x1D, 0x64, 0x4C, 0x0D, 0x51, 0x20, 0x4E, 0xA5, 0xF1, 0x45, 0x10, 0x10, 0xD8, 0x52};
    Cpa8U testIn[] = {
        0xAD, 0x9C, 0x44, 0x1F, 0x89, 0x0B, 0x38, 0xC4, 0x57, 0xA4, 0x9D, 0x42, 0x14, 0x07, 0xE8};
    Cpa8U testOut[] = {
        0xBA, 0x0F, 0x31, 0x30, 0x03, 0x34, 0xC5, 0x6B, 0x52, 0xA7, 0x49, 0x7C, 0xBA, 0xC0, 0x46};
    ret.bitLen = 120;
    ret.key = malloc(sizeof(Cpa8U) * sizeof(testKey));
    memcpy(ret.key, testKey, sizeof(testKey));
    ret.count = 0xFA556B26;
    ret.bearer = 0x03;
    ret.dir = 1;
    ret.in = malloc(sizeof(Cpa8U) * sizeof(testIn));
    memcpy(ret.in, testIn, sizeof(testIn));
    ret.out = malloc(sizeof(Cpa8U) * sizeof(testOut));
    memcpy(ret.out, testOut, sizeof(testOut));
    ret.keySize = sizeof(testKey);
    ret.inSize = sizeof(testIn);
    ret.outSize = sizeof(testOut);

    genIv(&ret);

    return ret;
}

TestData genNea2TestData1()
{
    TestData ret;
    ret.algo = CPA_CY_SYM_CIPHER_AES_CTR;
    Cpa8U testKey[] = {
        0xd3, 0xc5, 0xd5, 0x92, 0x32, 0x7f, 0xb1, 0x1c, 0x40, 0x35, 0xc6, 0x68, 0x0a, 0xf8, 0xc6, 0xd1};
    Cpa8U testIn[] = {
        0x98, 0x1b, 0xa6, 0x82, 0x4c, 0x1b, 0xfb, 0x1a, 0xb4, 0x85, 0x47, 0x20, 0x29, 0xb7, 0x1d, 0x80,
        0x8c, 0xe3, 0x3e, 0x2c, 0xc3, 0xc0, 0xb5, 0xfc, 0x1f, 0x3d, 0xe8, 0xa6, 0xdc, 0x66, 0xb1, 0xf0};
    Cpa8U testOut[] = {
        0xe9, 0xfe, 0xd8, 0xa6, 0x3d, 0x15, 0x53, 0x04, 0xd7, 0x1d, 0xf2, 0x0b, 0xf3, 0xe8, 0x22, 0x14,
        0xb2, 0x0e, 0xd7, 0xda, 0xd2, 0xf2, 0x33, 0xdc, 0x3c, 0x22, 0xd7, 0xbd, 0xee, 0xed, 0x8e, 0x78};
    ret.bitLen = 253;
    ret.key = malloc(sizeof(Cpa8U) * sizeof(testKey));
    memcpy(ret.key, testKey, sizeof(testKey));
    ret.count = 0x398a59b4;
    ret.bearer = 0x15;
    ret.dir = 1;
    ret.in = malloc(sizeof(Cpa8U) * sizeof(testIn));
    memcpy(ret.in, testIn, sizeof(testIn));
    ret.out = malloc(sizeof(Cpa8U) * sizeof(testOut));
    memcpy(ret.out, testOut, sizeof(testOut));
    ret.keySize = sizeof(testKey);
    ret.inSize = sizeof(testIn);
    ret.outSize = sizeof(testOut);

    genIv(&ret);

    return ret;
}

TestData genNea2TestData2()
{
    TestData ret;
    ret.algo = CPA_CY_SYM_CIPHER_AES_CTR;
    Cpa8U testKey[] = {
        0x2b, 0xd6, 0x45, 0x9f, 0x82, 0xc4, 0x40, 0xe0, 0x95, 0x2c, 0x49, 0x10, 0x48, 0x05, 0xff, 0x48};
    Cpa8U testIn[] = {
        0x7e, 0xc6, 0x12, 0x72, 0x74, 0x3b, 0xf1, 0x61, 0x47, 0x26, 0x44, 0x6a, 0x6c, 0x38, 0xce, 0xd1,
        0x66, 0xf6, 0xca, 0x76, 0xeb, 0x54, 0x30, 0x04, 0x42, 0x86, 0x34, 0x6c, 0xef, 0x13, 0x0f, 0x92,
        0x92, 0x2b, 0x03, 0x45, 0x0d, 0x3a, 0x99, 0x75, 0xe5, 0xbd, 0x2e, 0xa0, 0xeb, 0x55, 0xad, 0x8e,
        0x1b, 0x19, 0x9e, 0x3e, 0xc4, 0x31, 0x60, 0x20, 0xe9, 0xa1, 0xb2, 0x85, 0xe7, 0x62, 0x79, 0x53,
        0x59, 0xb7, 0xbd, 0xfd, 0x39, 0xbe, 0xf4, 0xb2, 0x48, 0x45, 0x83, 0xd5, 0xaf, 0xe0, 0x82, 0xae,
        0xe6, 0x38, 0xbf, 0x5f, 0xd5, 0xa6, 0x06, 0x19, 0x39, 0x01, 0xa0, 0x8f, 0x4a, 0xb4, 0x1a, 0xab,
        0x9b, 0x13, 0x48, 0x80};
    Cpa8U testOut[] = {
        0x59, 0x61, 0x60, 0x53, 0x53, 0xc6, 0x4b, 0xdc, 0xa1, 0x5b, 0x19, 0x5e, 0x28, 0x85, 0x53, 0xa9,
        0x10, 0x63, 0x25, 0x06, 0xd6, 0x20, 0x0a, 0xa7, 0x90, 0xc4, 0xc8, 0x06, 0xc9, 0x99, 0x04, 0xcf,
        0x24, 0x45, 0xcc, 0x50, 0xbb, 0x1c, 0xf1, 0x68, 0xa4, 0x96, 0x73, 0x73, 0x4e, 0x08, 0x1b, 0x57,
        0xe3, 0x24, 0xce, 0x52, 0x59, 0xc0, 0xe7, 0x8d, 0x4c, 0xd9, 0x7b, 0x87, 0x09, 0x76, 0x50, 0x3c,
        0x09, 0x43, 0xf2, 0xcb, 0x5a, 0xe8, 0xf0, 0x52, 0xc7, 0xb7, 0xd3, 0x92, 0x23, 0x95, 0x87, 0xb8,
        0x95, 0x60, 0x86, 0xbc, 0xab, 0x18, 0x83, 0x60, 0x42, 0xe2, 0xe6, 0xce, 0x42, 0x43, 0x2a, 0x17,
        0x10, 0x5c, 0x53, 0xd0};
    ret.bitLen = 798;
    ret.key = malloc(sizeof(Cpa8U) * sizeof(testKey));
    memcpy(ret.key, testKey, sizeof(testKey));
    ret.count = 0xc675a64b;
    ret.bearer = 0x0c;
    ret.dir = 1;
    ret.in = malloc(sizeof(Cpa8U) * sizeof(testIn));
    memcpy(ret.in, testIn, sizeof(testIn));
    ret.out = malloc(sizeof(Cpa8U) * sizeof(testOut));
    memcpy(ret.out, testOut, sizeof(testOut));
    ret.keySize = sizeof(testKey);
    ret.inSize = sizeof(testIn);
    ret.outSize = sizeof(testOut);

    genIv(&ret);

    return ret;
}

TestData genNea2TestData3()
{
    TestData ret;
    ret.algo = CPA_CY_SYM_CIPHER_AES_CTR;
    Cpa8U testKey[] = {
        0x0a, 0x8b, 0x6b, 0xd8, 0xd9, 0xb0, 0x8b, 0x08, 0xd6, 0x4e, 0x32, 0xd1, 0x81, 0x77, 0x77, 0xfb};
    Cpa8U testIn[] = {
        0xfd, 0x40, 0xa4, 0x1d, 0x37, 0x0a, 0x1f, 0x65, 0x74, 0x50, 0x95, 0x68, 0x7d, 0x47, 0xba, 0x1d,
        0x36, 0xd2, 0x34, 0x9e, 0x23, 0xf6, 0x44, 0x39, 0x2c, 0x8e, 0xa9, 0xc4, 0x9d, 0x40, 0xc1, 0x32,
        0x71, 0xaf, 0xf2, 0x64, 0xd0, 0xf2, 0x48, 0x00};
    Cpa8U testOut[] = {
        0x75, 0x75, 0x0d, 0x37, 0xb4, 0xbb, 0xa2, 0xa4, 0xde, 0xdb, 0x34, 0x23, 0x5b, 0xd6, 0x8c, 0x66,
        0x45, 0xac, 0xda, 0xac, 0xa4, 0x81, 0x38, 0xa3, 0xb0, 0xc4, 0x71, 0xe2, 0xa7, 0x04, 0x1a, 0x57,
        0x64, 0x23, 0xd2, 0x92, 0x72, 0x87, 0xf0, 0x00};
    ret.bitLen = 310;
    ret.key = malloc(sizeof(Cpa8U) * sizeof(testKey));
    memcpy(ret.key, testKey, sizeof(testKey));
    ret.count = 0x544d49cd;
    ret.bearer = 0x04;
    ret.dir = 0;
    ret.in = malloc(sizeof(Cpa8U) * sizeof(testIn));
    memcpy(ret.in, testIn, sizeof(testIn));
    ret.out = malloc(sizeof(Cpa8U) * sizeof(testOut));
    memcpy(ret.out, testOut, sizeof(testOut));
    ret.keySize = sizeof(testKey);
    ret.inSize = sizeof(testIn);
    ret.outSize = sizeof(testOut);

    genIv(&ret);

    return ret;
}

TestData genNea3TestData1()
{
    TestData ret;
    ret.algo = CPA_CY_SYM_CIPHER_ZUC_EEA3;
    Cpa8U testKey[] = {
        0x17, 0x3d, 0x14, 0xba, 0x50, 0x03, 0x73, 0x1d, 0x7a, 0x60, 0x04, 0x94, 0x70, 0xf0, 0x0a, 0x29};
    Cpa8U testIn[] = {
        0x6c, 0xf6, 0x53, 0x40, 0x73, 0x55, 0x52, 0xab, 0x0c, 0x97, 0x52, 0xfa, 0x6f, 0x90, 0x25, 0xfe,
        0x0b, 0xd6, 0x75, 0xd9, 0x00, 0x58, 0x75, 0xb2, 0x00, 0x00, 0x00, 0x00};
    Cpa8U testOut[] = {
        0xa6, 0xc8, 0x5f, 0xc6, 0x6a, 0xfb, 0x85, 0x33, 0xaa, 0xfc, 0x25, 0x18, 0xdf, 0xe7, 0x84, 0x94,
        0x0e, 0xe1, 0xe4, 0xb0, 0x30, 0x23, 0x8c, 0xc8, 0x00, 0x00, 0x00, 0x00};
    ret.bitLen = 193;
    ret.key = malloc(sizeof(Cpa8U) * sizeof(testKey));
    memcpy(ret.key, testKey, sizeof(testKey));
    ret.count = 0x66035492;
    ret.bearer = 0x0f;
    ret.dir = 0;
    ret.in = malloc(sizeof(Cpa8U) * sizeof(testIn));
    memcpy(ret.in, testIn, sizeof(testIn));
    ret.out = malloc(sizeof(Cpa8U) * sizeof(testOut));
    memcpy(ret.out, testOut, sizeof(testOut));
    ret.keySize = sizeof(testKey);
    ret.inSize = sizeof(testIn);
    ret.outSize = sizeof(testOut);

    genIv(&ret);

    return ret;
}

TestData genNea3TestData2()
{
    TestData ret;
    ret.algo = CPA_CY_SYM_CIPHER_ZUC_EEA3;
    Cpa8U testKey[] = {
        0xe5, 0xbd, 0x3e, 0xa0, 0xeb, 0x55, 0xad, 0xe8, 0x66, 0xc6, 0xac, 0x58, 0xbd, 0x54, 0x30, 0x2a};
    Cpa8U testIn[] = {
        0x14, 0xa8, 0xef, 0x69, 0x3d, 0x67, 0x85, 0x07, 0xbb, 0xe7, 0x27, 0x0a, 0x7f, 0x67, 0xff, 0x50,
        0x06, 0xc3, 0x52, 0x5b, 0x98, 0x07, 0xe4, 0x67, 0xc4, 0xe5, 0x60, 0x00, 0xba, 0x33, 0x8f, 0x5d,
        0x42, 0x95, 0x59, 0x03, 0x67, 0x51, 0x82, 0x22, 0x46, 0xc8, 0x0d, 0x3b, 0x38, 0xf0, 0x7f, 0x4b,
        0xe2, 0xd8, 0xff, 0x58, 0x05, 0xf5, 0x13, 0x22, 0x29, 0xbd, 0xe9, 0x3b, 0xbb, 0xdc, 0xaf, 0x38,
        0x2b, 0xf1, 0xee, 0x97, 0x2f, 0xbf, 0x99, 0x77, 0xba, 0xda, 0x89, 0x45, 0x84, 0x7a, 0x2a, 0x6c,
        0x9a, 0xd3, 0x4a, 0x66, 0x75, 0x54, 0xe0, 0x4d, 0x1f, 0x7f, 0xa2, 0xc3, 0x32, 0x41, 0xbd, 0x8f,
        0x01, 0xba, 0x22, 0x0d};
    Cpa8U testOut[] = {
        0x13, 0x1d, 0x43, 0xe0, 0xde, 0xa1, 0xbe, 0x5c, 0x5a, 0x1b, 0xfd, 0x97, 0x1d, 0x85, 0x2c, 0xbf,
        0x71, 0x2d, 0x7b, 0x4f, 0x57, 0x96, 0x1f, 0xea, 0x32, 0x08, 0xaf, 0xa8, 0xbc, 0xa4, 0x33, 0xf4,
        0x56, 0xad, 0x09, 0xc7, 0x41, 0x7e, 0x58, 0xbc, 0x69, 0xcf, 0x88, 0x66, 0xd1, 0x35, 0x3f, 0x74,
        0x86, 0x5e, 0x80, 0x78, 0x1d, 0x20, 0x2d, 0xfb, 0x3e, 0xcf, 0xf7, 0xfc, 0xbc, 0x3b, 0x19, 0x0f,
        0xe8, 0x2a, 0x20, 0x4e, 0xd0, 0xe3, 0x50, 0xfc, 0x0f, 0x6f, 0x26, 0x13, 0xb2, 0xf2, 0xbc, 0xa6,
        0xdf, 0x5a, 0x47, 0x3a, 0x57, 0xa4, 0xa0, 0x0d, 0x98, 0x5e, 0xba, 0xd8, 0x80, 0xd6, 0xf2, 0x38,
        0x64, 0xa0, 0x7b, 0x01};
    ret.bitLen = 800;
    ret.key = malloc(sizeof(Cpa8U) * sizeof(testKey));
    memcpy(ret.key, testKey, sizeof(testKey));
    ret.count = 0x00056823;
    ret.bearer = 0x18;
    ret.dir = 1;
    ret.in = malloc(sizeof(Cpa8U) * sizeof(testIn));
    memcpy(ret.in, testIn, sizeof(testIn));
    ret.out = malloc(sizeof(Cpa8U) * sizeof(testOut));
    memcpy(ret.out, testOut, sizeof(testOut));
    ret.keySize = sizeof(testKey);
    ret.inSize = sizeof(testIn);
    ret.outSize = sizeof(testOut);

    genIv(&ret);

    return ret;
}

TestData genNea3TestData3()
{
    TestData ret;
    ret.algo = CPA_CY_SYM_CIPHER_ZUC_EEA3;
    Cpa8U testKey[] = {
        0xd4, 0x55, 0x2a, 0x8f, 0xd6, 0xe6, 0x1c, 0xc8, 0x1a, 0x20, 0x09, 0x14, 0x1a, 0x29, 0xc1, 0x0b};
    Cpa8U testIn[] = {
        0x38, 0xf0, 0x7f, 0x4b, 0xe2, 0xd8, 0xff, 0x58, 0x05, 0xf5, 0x13, 0x22, 0x29, 0xbd, 0xe9, 0x3b,
        0xbb, 0xdc, 0xaf, 0x38, 0x2b, 0xf1, 0xee, 0x97, 0x2f, 0xbf, 0x99, 0x77, 0xba, 0xda, 0x89, 0x45,
        0x84, 0x7a, 0x2a, 0x6c, 0x9a, 0xd3, 0x4a, 0x66, 0x75, 0x54, 0xe0, 0x4d, 0x1f, 0x7f, 0xa2, 0xc3,
        0x32, 0x41, 0xbd, 0x8f, 0x01, 0xba, 0x22, 0x0d, 0x3c, 0xa4, 0xec, 0x41, 0xe0, 0x74, 0x59, 0x5f,
        0x54, 0xae, 0x2b, 0x45, 0x4f, 0xd9, 0x71, 0x43, 0x20, 0x43, 0x60, 0x19, 0x65, 0xcc, 0xa8, 0x5c,
        0x24, 0x17, 0xed, 0x6c, 0xbe, 0xc3, 0xba, 0xda, 0x84, 0xfc, 0x8a, 0x57, 0x9a, 0xea, 0x78, 0x37,
        0xb0, 0x27, 0x11, 0x77, 0x24, 0x2a, 0x64, 0xdc, 0x0a, 0x9d, 0xe7, 0x1a, 0x8e, 0xde, 0xe8, 0x6c,
        0xa3, 0xd4, 0x7d, 0x03, 0x3d, 0x6b, 0xf5, 0x39, 0x80, 0x4e, 0xca, 0x86, 0xc5, 0x84, 0xa9, 0x05,
        0x2d, 0xe4, 0x6a, 0xd3, 0xfc, 0xed, 0x65, 0x54, 0x3b, 0xd9, 0x02, 0x07, 0x37, 0x2b, 0x27, 0xaf,
        0xb7, 0x92, 0x34, 0xf5, 0xff, 0x43, 0xea, 0x87, 0x08, 0x20, 0xe2, 0xc2, 0xb7, 0x8a, 0x8a, 0xae,
        0x61, 0xcc, 0xe5, 0x2a, 0x05, 0x15, 0xe3, 0x48, 0xd1, 0x96, 0x66, 0x4a, 0x34, 0x56, 0xb1, 0x82,
        0xa0, 0x7c, 0x40, 0x6e, 0x4a, 0x20, 0x79, 0x12, 0x71, 0xcf, 0xed, 0xa1, 0x65, 0xd5, 0x35, 0xec,
        0x5e, 0xa2, 0xd4, 0xdf, 0x40, 0x00, 0x00, 0x00};
    Cpa8U testOut[] = {
        0x83, 0x83, 0xb0, 0x22, 0x9f, 0xcc, 0x0b, 0x9d, 0x22, 0x95, 0xec, 0x41, 0xc9, 0x77, 0xe9, 0xc2,
        0xbb, 0x72, 0xe2, 0x20, 0x37, 0x81, 0x41, 0xf9, 0xc8, 0x31, 0x8f, 0x3a, 0x27, 0x0d, 0xfb, 0xcd,
        0xee, 0x64, 0x11, 0xc2, 0xb3, 0x04, 0x4f, 0x17, 0x6d, 0xc6, 0xe0, 0x0f, 0x89, 0x60, 0xf9, 0x7a,
        0xfa, 0xcd, 0x13, 0x1a, 0xd6, 0xa3, 0xb4, 0x9b, 0x16, 0xb7, 0xba, 0xbc, 0xf2, 0xa5, 0x09, 0xeb,
        0xb1, 0x6a, 0x75, 0xdc, 0xab, 0x14, 0xff, 0x27, 0x5d, 0xbe, 0xee, 0xa1, 0xa2, 0xb1, 0x55, 0xf9,
        0xd5, 0x2c, 0x26, 0x45, 0x2d, 0x01, 0x87, 0xc3, 0x10, 0xa4, 0xee, 0x55, 0xbe, 0xaa, 0x78, 0xab,
        0x40, 0x24, 0x61, 0x5b, 0xa9, 0xf5, 0xd5, 0xad, 0xc7, 0x72, 0x8f, 0x73, 0x56, 0x06, 0x71, 0xf0,
        0x13, 0xe5, 0xe5, 0x50, 0x08, 0x5d, 0x32, 0x91, 0xdf, 0x7d, 0x5f, 0xec, 0xed, 0xde, 0xd5, 0x59,
        0x64, 0x1b, 0x6c, 0x2f, 0x58, 0x52, 0x33, 0xbc, 0x71, 0xe9, 0x60, 0x2b, 0xd2, 0x30, 0x58, 0x55,
        0xbb, 0xd2, 0x5f, 0xfa, 0x7f, 0x17, 0xec, 0xbc, 0x04, 0x2d, 0xaa, 0xe3, 0x8c, 0x1f, 0x57, 0xad,
        0x8e, 0x8e, 0xbd, 0x37, 0x34, 0x6f, 0x71, 0xbe, 0xfd, 0xbb, 0x74, 0x32, 0xe0, 0xe0, 0xbb, 0x2c,
        0xfc, 0x09, 0xbc, 0xd9, 0x65, 0x70, 0xcb, 0x0c, 0x0c, 0x39, 0xdf, 0x5e, 0x29, 0x29, 0x4e, 0x82,
        0x70, 0x3a, 0x63, 0x7f, 0x80, 0x00, 0x00, 0x00};
    ret.bitLen = 1570;
    ret.key = malloc(sizeof(Cpa8U) * sizeof(testKey));
    memcpy(ret.key, testKey, sizeof(testKey));
    ret.count = 0x76452ec1;
    ret.bearer = 0x02;
    ret.dir = 1;
    ret.in = malloc(sizeof(Cpa8U) * sizeof(testIn));
    memcpy(ret.in, testIn, sizeof(testIn));
    ret.out = malloc(sizeof(Cpa8U) * sizeof(testOut));
    memcpy(ret.out, testOut, sizeof(testOut));
    ret.keySize = sizeof(testKey);
    ret.inSize = sizeof(testIn);
    ret.outSize = sizeof(testOut);

    genIv(&ret);

    return ret;
}

TestData genSampleTestData()
{
    TestData ret;
    ret.algo = CPA_CY_SYM_CIPHER_AES_CBC;
    Cpa8U testKey[] = {
        0xEE, 0xE2, 0x7B, 0x5B, 0x10, 0xFD, 0xD2, 0x58, 0x49, 0x77, 0xF1, 0x22,
        0xD7, 0x1B, 0xA4, 0xCA, 0xEC, 0xBD, 0x15, 0xE2, 0x52, 0x6A, 0x21, 0x0B,
        0x41, 0x4C, 0x41, 0x4E, 0xA1, 0xAA, 0x01, 0x3F};
    Cpa8U testIv[] = {
        0x7E, 0x9B, 0x4C, 0x1D, 0x82, 0x4A, 0xC5, 0xDF, 0x99, 0x4C, 0xA1, 0x44,
        0xAA, 0x8D, 0x37, 0x27};
    Cpa8U testIn[] = {
        0xD7, 0x1B, 0xA4, 0xCA, 0xEC, 0xBD, 0x15, 0xE2, 0x52, 0x6A, 0x21, 0x0B,
        0x81, 0x77, 0x0C, 0x90, 0x68, 0xF6, 0x86, 0x50, 0xC6, 0x2C, 0x6E, 0xED,
        0x2F, 0x68, 0x39, 0x71, 0x75, 0x1D, 0x94, 0xF9, 0x0B, 0x21, 0x39, 0x06,
        0xBE, 0x20, 0x94, 0xC3, 0x43, 0x4F, 0x92, 0xC9, 0x07, 0xAA, 0xFE, 0x7F,
        0xCF, 0x05, 0x28, 0x6B, 0x82, 0xC4, 0xD7, 0x5E, 0xF3, 0xC7, 0x74, 0x68,
        0xCF, 0x05, 0x28, 0x6B, 0x82, 0xC4, 0xD7, 0x5E, 0xF3, 0xC7, 0x74, 0x68,
        0x80, 0x8B, 0x28, 0x8D, 0xCD, 0xCA, 0x94, 0xB8, 0xF5, 0x66, 0x0C, 0x00,
        0x5C, 0x69, 0xFC, 0xE8, 0x7F, 0x0D, 0x81, 0x97, 0x48, 0xC3, 0x6D, 0x24};
    Cpa8U testOut[] = {
        0xC1, 0x92, 0x33, 0x36, 0xF9, 0x50, 0x4F, 0x5B, 0xD9, 0x79, 0xE1, 0xF6,
        0xC7, 0x7A, 0x7D, 0x75, 0x47, 0xB7, 0xE2, 0xB9, 0xA1, 0x1B, 0xB9, 0xEE,
        0x16, 0xF9, 0x1A, 0x87, 0x59, 0xBC, 0xF2, 0x94, 0x7E, 0x71, 0x59, 0x52,
        0x3B, 0xB7, 0xF6, 0xB0, 0xB8, 0xE6, 0xC3, 0x9C, 0xA2, 0x4B, 0x5A, 0x8A,
        0x25, 0x61, 0xAB, 0x65, 0x4E, 0xB5, 0xD1, 0x3D, 0xB2, 0x7D, 0xA3, 0x9D,
        0x1E, 0x71, 0x45, 0x14, 0x5E, 0x9B, 0xB4, 0x75, 0xD3, 0xA8, 0xED, 0x40,
        0x01, 0x19, 0x2B, 0xEB, 0x04, 0x35, 0xAA, 0xA9, 0xA7, 0x95, 0x69, 0x77,
        0x40, 0xD9, 0x1D, 0xE4, 0xE7, 0x1A, 0xF9, 0x35, 0x06, 0x61, 0x3F, 0xAF};
    ret.key = malloc(sizeof(Cpa8U) * sizeof(testKey));
    memcpy(ret.key, testKey, sizeof(testKey));
    ret.iv = malloc(sizeof(Cpa8U) * sizeof(testIv));
    memcpy(ret.iv, testIv, sizeof(testIv));
    ret.in = malloc(sizeof(Cpa8U) * sizeof(testIn));
    memcpy(ret.in, testIn, sizeof(testIn));
    ret.out = malloc(sizeof(Cpa8U) * sizeof(testOut));
    memcpy(ret.out, testOut, sizeof(testOut));
    ret.keySize = sizeof(testKey);
    ret.ivSize = sizeof(testIv);
    ret.inSize = sizeof(testIn);
    ret.outSize = sizeof(testOut);

    return ret;
}

CpaCySymCipherDirection getCipherDirection(TestData testData)
{
    if (testData.dir == 0)
    {
        /* uplink */
        return CPA_CY_SYM_CIPHER_DIRECTION_DECRYPT;
    }
    else
    {
        /* downlink */
        return CPA_CY_SYM_CIPHER_DIRECTION_ENCRYPT;
    }
}

void freeTestData(TestData *testData)
{
    if (testData->key != NULL)
    {
        free(testData->key);
        testData->key = NULL;
    }
    if (testData->iv != NULL)
    {
        free(testData->iv);
        testData->iv = NULL;
    }
    if (testData->in != NULL)
    {
        free(testData->in);
        testData->in = NULL;
    }
    if (testData->out != NULL)
    {
        free(testData->out);
        testData->out = NULL;
    }
}

void genIv(TestData *testData)
{
    const Cpa32U ivLen = 16;
    testData->iv = malloc(sizeof(Cpa8U) * ivLen);
    testData->iv[0] = (Cpa8U)((testData->count >> 24) & 0xff);
    testData->iv[1] = (Cpa8U)((testData->count >> 16) & 0xff);
    testData->iv[2] = (Cpa8U)((testData->count >> 8) & 0xff);
    testData->iv[3] = (Cpa8U)(testData->count & 0xff);
    testData->iv[4] = (testData->bearer << 3) | ((testData->dir & 0x01) << 2);
    testData->iv[5] = 0x00;
    testData->iv[6] = 0x00;
    testData->iv[7] = 0x00;

    if (testData->algo == CPA_CY_SYM_CIPHER_SNOW3G_UEA2 || testData->algo == CPA_CY_SYM_CIPHER_ZUC_EEA3)
    {
        for (int i = 0; i < ivLen/2; i++)
        {
            testData->iv[ivLen/2+i] = testData->iv[i];
        }
    }

    testData->ivSize = ivLen;
}
